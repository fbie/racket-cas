#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{listings}
\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
 
\lstset{ %
  language=Lisp,                % the language of the code
  basicstyle=\footnotesize,           % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny\color{gray},  % the style that is used for the line-numbers
  stepnumber=1,                   % the step between two line-numbers. If it's 1, each line 
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},      % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=none,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=b,                   % sets the caption-position to bottom
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
 % title=\lstname,                   % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add a comment within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman lmodern
\font_sans helvet
\font_typewriter courier
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_title "Implementing Quantified Expressions for OpenJML"
\pdf_author "Florian Biermann"
\pdf_subject "SPLG Project Spring E2012"
\pdf_keywords "Racket, Gradual typing, Lock-free concurrency"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 4cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 4cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subject
SPLG Project Report E2012
\end_layout

\begin_layout Title
A Michael-Scott Queue Implementation for Racket
\end_layout

\begin_layout Author
Florian Biermann -- fbie@itu.dk
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Abstract
This will be the abstract
\end_layout

\begin_layout Abstract
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction and Motivation
\end_layout

\begin_layout Standard
Over the course of Programming Languages Seminar, many different advanced
 topics in current computer science research have been introduced.
 The focus of each technology is varying greatly.
 For a final project, it is tempting to try to combine a number of these
 and see, how they perform together.
\end_layout

\begin_layout Standard
This project is concerned with implementing a Michael-Scott Queue 
\begin_inset CommandInset citation
LatexCommand citep
key "michael_simple_1996"

\end_inset

 in Racket.
 The topics being combined here are gradual typing and non-blocking concurrency.
 This is especially interesting, as Racket does not feature a dedicated
 CAS operation executed in hardware.
 Therefore, the first step is to show the implementation of a software CAS
 in Racket.
\end_layout

\begin_layout Standard
The remainder of this report is structured as follows.
 First, I will give a detailed description of the implementation, outlining
 differences between a Java-like CAS operation and the new CAS-like operation
 I implemented for Racket.
 Further, I will describe how the Michael-Scott Queue implementation is
 designed and finally concern about gradually typing this implementation.
\end_layout

\begin_layout Standard
For evaluation, I will show how the Racket implementation of the Michael-Scott
 Queue performs in comparison.
 The report ends with a conclusion, discussing these results and outlining
 some future work.
\end_layout

\begin_layout Section
Implementation
\end_layout

\begin_layout Subsection
Compare-And-Swap
\end_layout

\begin_layout Subsection
Michael-Scott Queue
\end_layout

\begin_layout Subsection
Typed Version
\end_layout

\begin_layout Section
Evaluation
\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "SPLG"
options "abbrv"

\end_inset


\end_layout

\begin_layout Section
\start_of_appendix
Racket Implementations
\end_layout

\begin_layout Subsection
Atomic References
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{racket/atomic-ref.rkt}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Michael-Scott Queue
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting{racket/michael-scott-queue.rkt}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Typed-Racket Implementations
\end_layout

\begin_layout Subsection
Atomic References
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
lstinputlisting{typed/atomic-ref.rkt}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Michael-Scott Queue
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
lstinputlisting{typed/michael-scott-queue.rkt}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
